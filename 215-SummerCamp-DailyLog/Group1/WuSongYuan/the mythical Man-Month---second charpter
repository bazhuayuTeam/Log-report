人月神话第二章--------人月神话

这章的开头，布鲁克斯博士就引用了来自新奥尔良市安托万餐厅的菜单上的一句话：
Good cooking takes times. If youe are made to wait, it is to serve you better, and to please you.
--美食的烹饪需要时间；片刻等待，更多美味，更多享受。

布鲁克斯博士生动的将软件开发比喻为烹饪，因为软件开发就像烹饪一样，需要时间，才会有质量。

第二章主要讲了项目出现灾难性问题的原因有哪些。

1.对估算技术缺乏有效的研究。
就这方面来说，问题在于软件开发人员自身的乐观主义。可能是成千上百的挫折赶走了大多数人，只剩下了那些习惯关注
结果的人，也可能是计算机和程序员都很年轻，而年轻人总是乐观主义者---无论是什么样的程序，程序员总抱有这样一
种乐观---“这次它肯定会运行”或者“我刚刚找出最后一个bug”。

2.错误的将进度和工作量相互混淆。
人们总是在进度落后的时候安排更多的人手，但是这样是不是最好的呢？布鲁克斯博士给了我们答案，答案是否定的。
人数和时间的互换仅仅适用于以下情况：任务可以分解给参与人员，并且他们并不需要相互的交流。但是在系统编程
中这种情况近乎不可能。因为软件开发本质上是一项系统工作--错综复杂关系下的一种实践，沟通、交流的工作量
非常大，它很快会消耗任务分解下来所节省下来的个人时间。从而，增加更多的人手，实际上是延长了而不是缩短了实践进度。

3.系统测试时间的不足。
布鲁克斯博士给出了它多年项目安排的经验：三分之一时间用来计划，六分之一的时间用来编码，四分之一的时间
用来构建测试和早期系统测试，四分之一的时间用来系统测试，所有的构件的完成。
从这个安排中不难看出，测试用的时间几乎占了一半，排在第二位的是计划，而编码仅仅只用少量的时间。对大多数项目
的调查中发现，大多数项目在开始的时候对项目测试时间的估算都没有二分之一，但实际上最后完成项目后发现测试时间
基本上是二分之一，这样进度基本能够保证。如果不安排足够的测试时间，延迟在接近项目发布的时候，才发现进度
上的问题那就麻烦了。更为严重的是，在用软件支持其他的商业活动的情况下，延误会付出高昂的二次成本。

4.空泛的估算。
项目经理需要在一开始挺直腰杆，坚持他们的估计，确信自己的经验和直觉，开发并推行生产率图表、缺陷率图表、估算规则等，
他们最终会从这些数据上获益的。如果前期不进行仔细的周密的估算，会发生重复产生进度的灾难的。
布鲁克斯博士在这里举了一个详细的例子，阐述了如果没有良好的估算，而只是增加人力，会使进度出现多大的滞后。详见人月神话
第二章，空泛的估算一节。
总结brooks的法则：向进度落后的项目中增加人手，只会使进度更加落后--Adding manpower to late software project
makes it later.
